import { t } from './localization';
import { openTaskFile } from './common';

interface TaskInProgress {
    name: string;
    type: string;
    section: string;
    order: number;
    startDate: string;
    dueDate: string;
    progress: number;
    filePath: string;
}

export function getTasksInProgressElement(): HTMLElement {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    const container = document.createElement('div');
    container.className = 'tasks-container';

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    const activeTasks = getActiveTasks();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–¥–∞—á
    const maxTasks = 0;
    if (activeTasks.length > maxTasks) {
        const warningDiv = document.createElement('div');
        warningDiv.className = 'task-warning';
        warningDiv.textContent = t('maxActiveTasksWarning');
        container.appendChild(warningDiv);
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á –ø–æ –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É
    activeTasks.sort((a, b) => a.order - b.order);

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞–¥–∞—á
    activeTasks.forEach(task => {
        const taskCard = document.createElement('div');
        taskCard.className = 'task-card';

        taskCard.addEventListener('click', () => {
            openTaskFile(task.filePath);
        });

        // –ò–∫–æ–Ω–∫–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        const typeIcon = document.createElement('span');
        typeIcon.className = 'task-type-icon';
        typeIcon.textContent = getTaskTypeIcon(task.type);
        taskCard.appendChild(typeIcon);

        // –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        const nameSpan = document.createElement('span');
        nameSpan.className = 'task-name';
        nameSpan.textContent = task.name;
        taskCard.appendChild(nameSpan);

        // –°–µ–∫—Ü–∏—è –∑–∞–¥–∞—á–∏
        const sectionSpan = document.createElement('span');
        sectionSpan.className = 'task-section';
        sectionSpan.textContent = `[${task.section}]`;
        taskCard.appendChild(sectionSpan);

        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–∞—Ç
        const datesDiv = document.createElement('div');
        datesDiv.className = 'task-dates';

        // –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
        const startDateSpan = document.createElement('span');
        startDateSpan.textContent = `–ù–∞—á–∞–ª–æ: ${formatDate(task.startDate)}`;
        datesDiv.appendChild(startDateSpan);

        // –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        const dueDateSpan = document.createElement('span');
        dueDateSpan.textContent = `–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ: ${formatDate(task.dueDate)}`;

        if (isTaskOverdue(task)) {
            dueDateSpan.style.color = 'red';
            dueDateSpan.style.fontWeight = 'bold';
            dueDateSpan.textContent += ' (–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ!)';
        }
        datesDiv.appendChild(dueDateSpan);

        taskCard.appendChild(datesDiv);

        // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        const progressDiv = document.createElement('div');
        progressDiv.className = 'task-progress';

        const progressBar = document.createElement('div');
        progressBar.textContent = generateProgressBar(task.progress);
        progressDiv.appendChild(progressBar);

        const progressText = document.createElement('span');
        progressText.textContent = `${task.progress}%`;
        progressDiv.appendChild(progressText);

        taskCard.appendChild(progressDiv);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.appendChild(taskCard);
    });

    return container;
}

function getActiveTasks(): TaskInProgress[] {
    // –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    return [
        {
            name: "–ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É 'Atomic Habits'",
            type: "–ö–Ω–∏–≥–∞",
            section: "–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ",
            order: 1,
            startDate: "2023-10-01",
            dueDate: "2023-11-15",
            progress: 60,
            filePath: "Tasks/Book.md"
        },
        {
            name: "–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º'",
            type: "–°—Ç–∞—Ç—å—è",
            section: "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
            order: 3,
            startDate: "2025-07-01",
            dueDate: "2025-07-25",
            progress: 40,
            filePath: "Tasks/Article.md"
        },
        {
            name: "–ü—Ä–æ—Å–ª—É—à–∞—Ç—å –ø–æ–¥–∫–∞—Å—Ç 'Culips'",
            type: "–ü–æ–¥–∫–∞—Å—Ç",
            section: "Learning English",
            order: 2,
            startDate: "2025-06-01",
            dueDate: "2025-12-25",
            progress: 11,
            filePath: "Tasks/Podcast.md"
        }
    ];
}

function getTaskTypeIcon(type: string): string {
    const icons: Record<string, string> = {
        "–ö–Ω–∏–≥–∞": "üìö",
        "–°—Ç–∞—Ç—å—è": "üìÑ",
        "–ö—É—Ä—Å": "üéì",
        "–í–∏–¥–µ–æ": "‚ñ∂Ô∏è",
        "–ü–æ–¥–∫–∞—Å—Ç": "üéß"
    };
    return icons[type] || "‚úèÔ∏è";
}

function generateProgressBar(progress: number): string {
    const filled = 'üü©';
    const empty = '‚¨ú';
    const totalBlocks = 5;
    const filledBlocks = Math.round(progress / 100 * totalBlocks);
    return filled.repeat(filledBlocks) + empty.repeat(totalBlocks - filledBlocks);
}

function isTaskOverdue(task: TaskInProgress): boolean {
    const today = new Date();
    const dueDate = new Date(task.dueDate);
    return today > dueDate;
}

function formatDate(dateStr: string): string {
    return dateStr;
}
