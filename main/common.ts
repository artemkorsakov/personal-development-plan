import { Notice, TFile, Vault } from 'obsidian';
import { t } from './localization';
import { MaterialType } from './../settings/settings';

export async function openTaskFile(path: string, vault: Vault): Promise<void> {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –ø–æ –ø—É—Ç–∏
        const file = vault.getAbstractFileByPath(path);

        if (!file) {
            new Notice(`File not found: ${path}`);
            return;
        }

        if (!(file instanceof TFile)) {
            new Notice(`The following path is not a file: ${path}`);
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç (–≤–∫–ª–∞–¥–∫—É)
        const leaf = this.app.workspace.getLeaf();

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
        await leaf.openFile(file, { active: true });

    } catch (error) {
        console.error('Error opening file:', error);
        new Notice(`Failed to open file: ${path}`);
    }
}

export async function openOrCreateSourceFile(filePath: string, vault: Vault, content: string): Promise<void> {
    let file = vault.getAbstractFileByPath(filePath) as TFile;

    if (!file) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const folderPath = filePath.split('/').slice(0, -1).join('/');
        const fileName = filePath.split('/').pop() || 'Untitled.md';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (!vault.getAbstractFileByPath(folderPath)) {
            await vault.createFolder(folderPath);
        }

        // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –±–∞–∑–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        file = await vault.create(filePath, content);
    }

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
    openTaskFile(filePath, vault);
}

export function getTaskTypeIcon(type: string): string {
    const icons: Record<string, string> = {
        "book": "üìö",
        "article": "üìÑ",
        "course": "üéì",
        "video": "‚ñ∂Ô∏è",
        "podcast": "üéß"
    };
    return icons[type] || "‚úèÔ∏è";
}

export function getMaterialNameById(materialTypes: MaterialType[], id: string): string {
    const foundType = materialTypes.find((type: MaterialType) => type.id === id);
    return foundType?.name || `${t('unknownSection')}: ${id}`;
}

export function createHelpIcon(tabTitle: HTMLElement, tooltip: string) {
     const helpIcon = tabTitle.createEl('span', {
         cls: 'tab-help-icon',
     });

     // –°–æ–∑–¥–∞–µ–º SVG —ç–ª–µ–º–µ–Ω—Ç
     const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
     svg.setAttribute('width', '14');
     svg.setAttribute('height', '14');
     svg.setAttribute('viewBox', '0 0 24 24');
     svg.setAttribute('fill', 'none');
     svg.setAttribute('stroke', 'currentColor');

     // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥
     const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
     circle.setAttribute('cx', '12');
     circle.setAttribute('cy', '12');
     circle.setAttribute('r', '10');
     circle.setAttribute('stroke-width', '1.5');
     svg.appendChild(circle);

    // –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å (–∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞)
    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
    path.setAttribute('d', 'M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3');
    path.setAttribute('stroke-width', '1.5');
    path.setAttribute('stroke-linecap', 'round');
    svg.appendChild(path);

    // –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫—É –≤–Ω–∏–∑—É
    const dot = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
    dot.setAttribute('cx', '12');
    dot.setAttribute('cy', '16');
    dot.setAttribute('r', '1');
    dot.setAttribute('fill', 'currentColor');
    svg.appendChild(dot);

    // –î–æ–±–∞–≤–ª—è–µ–º SVG –≤ –∏–∫–æ–Ω–∫—É
    helpIcon.appendChild(svg);
    helpIcon.setAttribute('data-tooltip', tooltip);
}
